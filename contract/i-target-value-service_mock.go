// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-target-value-service.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	contract "github.com/ahl5esoft/lite-go/model/contract"
	global "github.com/ahl5esoft/lite-go/model/global"
	gomock "github.com/golang/mock/gomock"
)

// MockITargetValueService is a mock of ITargetValueService interface.
type MockITargetValueService struct {
	ctrl     *gomock.Controller
	recorder *MockITargetValueServiceMockRecorder
}

// MockITargetValueServiceMockRecorder is the mock recorder for MockITargetValueService.
type MockITargetValueServiceMockRecorder struct {
	mock *MockITargetValueService
}

// NewMockITargetValueService creates a new mock instance.
func NewMockITargetValueService(ctrl *gomock.Controller) *MockITargetValueService {
	mock := &MockITargetValueService{ctrl: ctrl}
	mock.recorder = &MockITargetValueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITargetValueService) EXPECT() *MockITargetValueServiceMockRecorder {
	return m.recorder
}

// CheckConditions mocks base method.
func (m *MockITargetValueService) CheckConditions(arg0 IUnitOfWork, arg1 [][]contract.IValueCondition) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConditions", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckConditions indicates an expected call of CheckConditions.
func (mr *MockITargetValueServiceMockRecorder) CheckConditions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConditions", reflect.TypeOf((*MockITargetValueService)(nil).CheckConditions), arg0, arg1)
}

// GetCount mocks base method.
func (m *MockITargetValueService) GetCount(arg0 IUnitOfWork, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockITargetValueServiceMockRecorder) GetCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockITargetValueService)(nil).GetCount), arg0, arg1)
}

// GetEntry mocks base method.
func (m *MockITargetValueService) GetEntry(arg0 *global.UserValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockITargetValueServiceMockRecorder) GetEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockITargetValueService)(nil).GetEntry), arg0)
}

// Update mocks base method.
func (m *MockITargetValueService) Update(arg0 IUnitOfWork, arg1 string, arg2 []contract.IValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITargetValueServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITargetValueService)(nil).Update), arg0, arg1, arg2)
}
