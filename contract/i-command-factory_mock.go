// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-command-factory.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommandFactory is a mock of ICommandFactory interface.
type MockICommandFactory struct {
	ctrl     *gomock.Controller
	recorder *MockICommandFactoryMockRecorder
}

// MockICommandFactoryMockRecorder is the mock recorder for MockICommandFactory.
type MockICommandFactoryMockRecorder struct {
	mock *MockICommandFactory
}

// NewMockICommandFactory creates a new mock instance.
func NewMockICommandFactory(ctrl *gomock.Controller) *MockICommandFactory {
	mock := &MockICommandFactory{ctrl: ctrl}
	mock.recorder = &MockICommandFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommandFactory) EXPECT() *MockICommandFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockICommandFactory) Build(name string, args ...string) ICommand {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Build", varargs...)
	ret0, _ := ret[0].(ICommand)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockICommandFactoryMockRecorder) Build(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockICommandFactory)(nil).Build), varargs...)
}
