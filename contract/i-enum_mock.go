// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-enum.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	contract "github.com/ahl5esoft/lite-go/model/contract"
	gomock "github.com/golang/mock/gomock"
)

// MockIEnum is a mock of IEnum interface.
type MockIEnum struct {
	ctrl     *gomock.Controller
	recorder *MockIEnumMockRecorder
}

// MockIEnumMockRecorder is the mock recorder for MockIEnum.
type MockIEnumMockRecorder struct {
	mock *MockIEnum
}

// NewMockIEnum creates a new mock instance.
func NewMockIEnum(ctrl *gomock.Controller) *MockIEnum {
	mock := &MockIEnum{ctrl: ctrl}
	mock.recorder = &MockIEnumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEnum) EXPECT() *MockIEnumMockRecorder {
	return m.recorder
}

// FindItems mocks base method.
func (m *MockIEnum) FindItems() ([]contract.IEnumItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItems")
	ret0, _ := ret[0].([]contract.IEnumItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItems indicates an expected call of FindItems.
func (mr *MockIEnumMockRecorder) FindItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItems", reflect.TypeOf((*MockIEnum)(nil).FindItems))
}

// GetAllItem mocks base method.
func (m *MockIEnum) GetAllItem() (map[int]contract.IEnumItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItem")
	ret0, _ := ret[0].(map[int]contract.IEnumItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItem indicates an expected call of GetAllItem.
func (mr *MockIEnumMockRecorder) GetAllItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItem", reflect.TypeOf((*MockIEnum)(nil).GetAllItem))
}
