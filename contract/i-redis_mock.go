// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-redis.go

// Package contract is a generated GoMock package.
package contract

import (
	message "github.com/ahl5esoft/lite-go/model/message"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockIRedis is a mock of IRedis interface
type MockIRedis struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisMockRecorder
}

// MockIRedisMockRecorder is the mock recorder for MockIRedis
type MockIRedisMockRecorder struct {
	mock *MockIRedis
}

// NewMockIRedis creates a new mock instance
func NewMockIRedis(ctrl *gomock.Controller) *MockIRedis {
	mock := &MockIRedis{ctrl: ctrl}
	mock.recorder = &MockIRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRedis) EXPECT() *MockIRedisMockRecorder {
	return m.recorder
}

// BitCount mocks base method
func (m *MockIRedis) BitCount(key string, start, end int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", key, start, end)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitCount indicates an expected call of BitCount
func (mr *MockIRedisMockRecorder) BitCount(key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockIRedis)(nil).BitCount), key, start, end)
}

// BitOp mocks base method
func (m *MockIRedis) BitOp(op, destKey string, keys ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{op, destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOp", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitOp indicates an expected call of BitOp
func (mr *MockIRedisMockRecorder) BitOp(op, destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{op, destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOp", reflect.TypeOf((*MockIRedis)(nil).BitOp), varargs...)
}

// BitPos mocks base method
func (m *MockIRedis) BitPos(key string, bit bool, start, end int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitPos", key, bit, start, end)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BitPos indicates an expected call of BitPos
func (mr *MockIRedisMockRecorder) BitPos(key, bit, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockIRedis)(nil).BitPos), key, bit, start, end)
}

// BLPop mocks base method
func (m *MockIRedis) BLPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BLPop indicates an expected call of BLPop
func (mr *MockIRedisMockRecorder) BLPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockIRedis)(nil).BLPop), varargs...)
}

// BRPop mocks base method
func (m *MockIRedis) BRPop(timeout time.Duration, keys ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPop indicates an expected call of BRPop
func (mr *MockIRedisMockRecorder) BRPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockIRedis)(nil).BRPop), varargs...)
}

// Close mocks base method
func (m *MockIRedis) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockIRedisMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIRedis)(nil).Close))
}

// Decr mocks base method
func (m *MockIRedis) Decr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decr indicates an expected call of Decr
func (mr *MockIRedisMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockIRedis)(nil).Decr), key)
}

// DecrBy mocks base method
func (m *MockIRedis) DecrBy(key string, decrement int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", key, decrement)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecrBy indicates an expected call of DecrBy
func (mr *MockIRedisMockRecorder) DecrBy(key, decrement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockIRedis)(nil).DecrBy), key, decrement)
}

// Del mocks base method
func (m *MockIRedis) Del(arg0 ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Del indicates an expected call of Del
func (mr *MockIRedisMockRecorder) Del(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIRedis)(nil).Del), arg0...)
}

// Exists mocks base method
func (m *MockIRedis) Exists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIRedisMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIRedis)(nil).Exists), arg0)
}

// ExpireAt mocks base method
func (m *MockIRedis) ExpireAt(key string, time time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", key, time)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpireAt indicates an expected call of ExpireAt
func (mr *MockIRedisMockRecorder) ExpireAt(key, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockIRedis)(nil).ExpireAt), key, time)
}

// Expires mocks base method
func (m *MockIRedis) Expires(key string, seconds time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expires", key, seconds)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expires indicates an expected call of Expires
func (mr *MockIRedisMockRecorder) Expires(key, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expires", reflect.TypeOf((*MockIRedis)(nil).Expires), key, seconds)
}

// Get mocks base method
func (m *MockIRedis) Get(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIRedisMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRedis)(nil).Get), key)
}

// GetBit mocks base method
func (m *MockIRedis) GetBit(key string, offset int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", key, offset)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBit indicates an expected call of GetBit
func (mr *MockIRedisMockRecorder) GetBit(key, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockIRedis)(nil).GetBit), key, offset)
}

// GeoAdd mocks base method
func (m *MockIRedis) GeoAdd(key string, locations ...message.RedisGeoLocation) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range locations {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoAdd indicates an expected call of GeoAdd
func (mr *MockIRedisMockRecorder) GeoAdd(key interface{}, locations ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, locations...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockIRedis)(nil).GeoAdd), varargs...)
}

// GeoDist mocks base method
func (m *MockIRedis) GeoDist(key, member1, member2, unit string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", key, member1, member2, unit)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoDist indicates an expected call of GeoDist
func (mr *MockIRedisMockRecorder) GeoDist(key, member1, member2, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockIRedis)(nil).GeoDist), key, member1, member2, unit)
}

// GeoPos mocks base method
func (m *MockIRedis) GeoPos(key string, members ...string) ([]*message.RedisGeoPosition, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].([]*message.RedisGeoPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoPos indicates an expected call of GeoPos
func (mr *MockIRedisMockRecorder) GeoPos(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockIRedis)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method
func (m *MockIRedis) GeoRadius(key string, longitude, latitude float64, query message.RedisGeoRadiusQuery) ([]message.RedisGeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", key, longitude, latitude, query)
	ret0, _ := ret[0].([]message.RedisGeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadius indicates an expected call of GeoRadius
func (mr *MockIRedisMockRecorder) GeoRadius(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockIRedis)(nil).GeoRadius), key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method
func (m *MockIRedis) GeoRadiusByMember(key, member string, query message.RedisGeoRadiusQuery) ([]message.RedisGeoLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", key, member, query)
	ret0, _ := ret[0].([]message.RedisGeoLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember
func (mr *MockIRedisMockRecorder) GeoRadiusByMember(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockIRedis)(nil).GeoRadiusByMember), key, member, query)
}

// HDel mocks base method
func (m *MockIRedis) HDel(key string, fields ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HDel indicates an expected call of HDel
func (mr *MockIRedisMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockIRedis)(nil).HDel), varargs...)
}

// HExists mocks base method
func (m *MockIRedis) HExists(key, field string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HExists indicates an expected call of HExists
func (mr *MockIRedisMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockIRedis)(nil).HExists), key, field)
}

// HGet mocks base method
func (m *MockIRedis) HGet(key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet
func (mr *MockIRedisMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockIRedis)(nil).HGet), key, field)
}

// HGetAll mocks base method
func (m *MockIRedis) HGetAll(key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll
func (mr *MockIRedisMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockIRedis)(nil).HGetAll), key)
}

// HIncrBy mocks base method
func (m *MockIRedis) HIncrBy(key, field string, increment int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, increment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrBy indicates an expected call of HIncrBy
func (mr *MockIRedisMockRecorder) HIncrBy(key, field, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockIRedis)(nil).HIncrBy), key, field, increment)
}

// HIncrByFloat mocks base method
func (m *MockIRedis) HIncrByFloat(key, field string, increment float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", key, field, increment)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HIncrByFloat indicates an expected call of HIncrByFloat
func (mr *MockIRedisMockRecorder) HIncrByFloat(key, field, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockIRedis)(nil).HIncrByFloat), key, field, increment)
}

// HLen mocks base method
func (m *MockIRedis) HLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HLen indicates an expected call of HLen
func (mr *MockIRedisMockRecorder) HLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockIRedis)(nil).HLen), key)
}

// HKeys mocks base method
func (m *MockIRedis) HKeys(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HKeys indicates an expected call of HKeys
func (mr *MockIRedisMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockIRedis)(nil).HKeys), key)
}

// HMGet mocks base method
func (m *MockIRedis) HMGet(key string, fields ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HMGet indicates an expected call of HMGet
func (mr *MockIRedisMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockIRedis)(nil).HMGet), varargs...)
}

// HMSet mocks base method
func (m *MockIRedis) HMSet(key string, fieldOrValues ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fieldOrValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMSet", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet
func (mr *MockIRedisMockRecorder) HMSet(key interface{}, fieldOrValues ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fieldOrValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockIRedis)(nil).HMSet), varargs...)
}

// HScan mocks base method
func (m *MockIRedis) HScan(key string, cursor uint64, match string, count int64) (map[string]string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", key, cursor, match, count)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HScan indicates an expected call of HScan
func (mr *MockIRedisMockRecorder) HScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockIRedis)(nil).HScan), key, cursor, match, count)
}

// HSet mocks base method
func (m *MockIRedis) HSet(key, field, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSet indicates an expected call of HSet
func (mr *MockIRedisMockRecorder) HSet(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockIRedis)(nil).HSet), key, field, value)
}

// HSetNX mocks base method
func (m *MockIRedis) HSetNX(key, field, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HSetNX indicates an expected call of HSetNX
func (mr *MockIRedisMockRecorder) HSetNX(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockIRedis)(nil).HSetNX), key, field, value)
}

// HStrLen mocks base method
func (m *MockIRedis) HStrLen(key, field string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HStrLen", key, field)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HStrLen indicates an expected call of HStrLen
func (mr *MockIRedisMockRecorder) HStrLen(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HStrLen", reflect.TypeOf((*MockIRedis)(nil).HStrLen), key, field)
}

// HVals mocks base method
func (m *MockIRedis) HVals(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HVals indicates an expected call of HVals
func (mr *MockIRedisMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockIRedis)(nil).HVals), key)
}

// Incr mocks base method
func (m *MockIRedis) Incr(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr
func (mr *MockIRedisMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockIRedis)(nil).Incr), key)
}

// IncrBy mocks base method
func (m *MockIRedis) IncrBy(key string, increment int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, increment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy
func (mr *MockIRedisMockRecorder) IncrBy(key, increment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockIRedis)(nil).IncrBy), key, increment)
}

// LIndex mocks base method
func (m *MockIRedis) LIndex(key string, index int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", key, index)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LIndex indicates an expected call of LIndex
func (mr *MockIRedisMockRecorder) LIndex(key, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockIRedis)(nil).LIndex), key, index)
}

// LLen mocks base method
func (m *MockIRedis) LLen(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LLen indicates an expected call of LLen
func (mr *MockIRedisMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockIRedis)(nil).LLen), key)
}

// LPop mocks base method
func (m *MockIRedis) LPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPop indicates an expected call of LPop
func (mr *MockIRedisMockRecorder) LPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockIRedis)(nil).LPop), key)
}

// LPush mocks base method
func (m *MockIRedis) LPush(key string, values ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPush indicates an expected call of LPush
func (mr *MockIRedisMockRecorder) LPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockIRedis)(nil).LPush), varargs...)
}

// LPushX mocks base method
func (m *MockIRedis) LPushX(key, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LPushX indicates an expected call of LPushX
func (mr *MockIRedisMockRecorder) LPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockIRedis)(nil).LPushX), key, value)
}

// LRange mocks base method
func (m *MockIRedis) LRange(key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange
func (mr *MockIRedisMockRecorder) LRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockIRedis)(nil).LRange), key, start, stop)
}

// LRem mocks base method
func (m *MockIRedis) LRem(key string, count int64, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", key, count, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRem indicates an expected call of LRem
func (mr *MockIRedisMockRecorder) LRem(key, count, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockIRedis)(nil).LRem), key, count, value)
}

// LSet mocks base method
func (m *MockIRedis) LSet(key string, index int64, value string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", key, index, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LSet indicates an expected call of LSet
func (mr *MockIRedisMockRecorder) LSet(key, index, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockIRedis)(nil).LSet), key, index, value)
}

// LTrim mocks base method
func (m *MockIRedis) LTrim(key string, start, stop int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", key, start, stop)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LTrim indicates an expected call of LTrim
func (mr *MockIRedisMockRecorder) LTrim(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockIRedis)(nil).LTrim), key, start, stop)
}

// RPop mocks base method
func (m *MockIRedis) RPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPop indicates an expected call of RPop
func (mr *MockIRedisMockRecorder) RPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockIRedis)(nil).RPop), key)
}

// RPush mocks base method
func (m *MockIRedis) RPush(key string, values ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPush indicates an expected call of RPush
func (mr *MockIRedisMockRecorder) RPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockIRedis)(nil).RPush), varargs...)
}

// RPushX mocks base method
func (m *MockIRedis) RPushX(key, value string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPushX", key, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RPushX indicates an expected call of RPushX
func (mr *MockIRedisMockRecorder) RPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockIRedis)(nil).RPushX), key, value)
}

// SAdd mocks base method
func (m *MockIRedis) SAdd(key string, members ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SAdd indicates an expected call of SAdd
func (mr *MockIRedisMockRecorder) SAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockIRedis)(nil).SAdd), varargs...)
}

// SCard mocks base method
func (m *MockIRedis) SCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCard indicates an expected call of SCard
func (mr *MockIRedisMockRecorder) SCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockIRedis)(nil).SCard), key)
}

// Set mocks base method
func (m *MockIRedis) Set(arg0, arg1 string, arg2 ...interface{}) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set
func (mr *MockIRedisMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRedis)(nil).Set), varargs...)
}

// SetBit mocks base method
func (m *MockIRedis) SetBit(key string, offset int64, value bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", key, offset, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBit indicates an expected call of SetBit
func (mr *MockIRedisMockRecorder) SetBit(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockIRedis)(nil).SetBit), key, offset, value)
}

// SIsMember mocks base method
func (m *MockIRedis) SIsMember(key, member string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, member)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SIsMember indicates an expected call of SIsMember
func (mr *MockIRedisMockRecorder) SIsMember(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockIRedis)(nil).SIsMember), key, member)
}

// SMembers mocks base method
func (m *MockIRedis) SMembers(key string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SMembers indicates an expected call of SMembers
func (mr *MockIRedisMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockIRedis)(nil).SMembers), key)
}

// SPop mocks base method
func (m *MockIRedis) SPop(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SPop indicates an expected call of SPop
func (mr *MockIRedisMockRecorder) SPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockIRedis)(nil).SPop), key)
}

// Time mocks base method
func (m *MockIRedis) Time() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Time indicates an expected call of Time
func (mr *MockIRedisMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockIRedis)(nil).Time))
}

// TTL mocks base method
func (m *MockIRedis) TTL(key string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TTL indicates an expected call of TTL
func (mr *MockIRedisMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockIRedis)(nil).TTL), key)
}

// ZAdd mocks base method
func (m *MockIRedis) ZAdd(key string, members ...message.RedisZMember) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZAdd indicates an expected call of ZAdd
func (mr *MockIRedisMockRecorder) ZAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockIRedis)(nil).ZAdd), varargs...)
}

// ZCard mocks base method
func (m *MockIRedis) ZCard(key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCard indicates an expected call of ZCard
func (mr *MockIRedisMockRecorder) ZCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockIRedis)(nil).ZCard), key)
}

// ZCount mocks base method
func (m *MockIRedis) ZCount(key string, min, max float64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZCount indicates an expected call of ZCount
func (mr *MockIRedisMockRecorder) ZCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockIRedis)(nil).ZCount), key, min, max)
}

// ZIncrBy mocks base method
func (m *MockIRedis) ZIncrBy(key string, increment float64, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", key, increment, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZIncrBy indicates an expected call of ZIncrBy
func (mr *MockIRedisMockRecorder) ZIncrBy(key, increment, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockIRedis)(nil).ZIncrBy), key, increment, member)
}

// ZRange mocks base method
func (m *MockIRedis) ZRange(key string, start, stop int64, withscores bool) ([]message.RedisZMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop, withscores)
	ret0, _ := ret[0].([]message.RedisZMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRange indicates an expected call of ZRange
func (mr *MockIRedisMockRecorder) ZRange(key, start, stop, withscores interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockIRedis)(nil).ZRange), key, start, stop, withscores)
}

// ZRangeByScore mocks base method
func (m *MockIRedis) ZRangeByScore(key, min, max string, opt message.RedisZRangeByScore) ([]message.RedisZMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", key, min, max, opt)
	ret0, _ := ret[0].([]message.RedisZMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRangeByScore indicates an expected call of ZRangeByScore
func (mr *MockIRedisMockRecorder) ZRangeByScore(key, min, max, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockIRedis)(nil).ZRangeByScore), key, min, max, opt)
}

// ZRank mocks base method
func (m *MockIRedis) ZRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRank indicates an expected call of ZRank
func (mr *MockIRedisMockRecorder) ZRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockIRedis)(nil).ZRank), key, member)
}

// ZRem mocks base method
func (m *MockIRedis) ZRem(key string, members ...string) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRem indicates an expected call of ZRem
func (mr *MockIRedisMockRecorder) ZRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockIRedis)(nil).ZRem), varargs...)
}

// ZRemRangeByRank mocks base method
func (m *MockIRedis) ZRemRangeByRank(key string, start, stop int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", key, start, stop)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank
func (mr *MockIRedisMockRecorder) ZRemRangeByRank(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockIRedis)(nil).ZRemRangeByRank), key, start, stop)
}

// ZRemRangeByScore mocks base method
func (m *MockIRedis) ZRemRangeByScore(key string, min, max float64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, min, max)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore
func (mr *MockIRedisMockRecorder) ZRemRangeByScore(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockIRedis)(nil).ZRemRangeByScore), key, min, max)
}

// ZRevRange mocks base method
func (m *MockIRedis) ZRevRange(key string, start, stop int64, withScores bool) ([]message.RedisZMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", key, start, stop, withScores)
	ret0, _ := ret[0].([]message.RedisZMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRange indicates an expected call of ZRevRange
func (mr *MockIRedisMockRecorder) ZRevRange(key, start, stop, withScores interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockIRedis)(nil).ZRevRange), key, start, stop, withScores)
}

// ZRevRangeByScore mocks base method
func (m *MockIRedis) ZRevRangeByScore(key, min, max string, opt message.RedisZRangeByScore) ([]message.RedisZMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", key, min, max, opt)
	ret0, _ := ret[0].([]message.RedisZMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore
func (mr *MockIRedisMockRecorder) ZRevRangeByScore(key, min, max, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockIRedis)(nil).ZRevRangeByScore), key, min, max, opt)
}

// ZRevRank mocks base method
func (m *MockIRedis) ZRevRank(key, member string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", key, member)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZRevRank indicates an expected call of ZRevRank
func (mr *MockIRedisMockRecorder) ZRevRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockIRedis)(nil).ZRevRank), key, member)
}

// ZScan mocks base method
func (m *MockIRedis) ZScan(key string, cursor uint64, match string, count int64) ([]message.RedisZMember, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", key, cursor, match, count)
	ret0, _ := ret[0].([]message.RedisZMember)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ZScan indicates an expected call of ZScan
func (mr *MockIRedisMockRecorder) ZScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockIRedis)(nil).ZScan), key, cursor, match, count)
}

// ZScore mocks base method
func (m *MockIRedis) ZScore(key, member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", key, member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ZScore indicates an expected call of ZScore
func (mr *MockIRedisMockRecorder) ZScore(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockIRedis)(nil).ZScore), key, member)
}
