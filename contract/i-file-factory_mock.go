// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-file-factory.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFileFactory is a mock of IFileFactory interface.
type MockIFileFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFileFactoryMockRecorder
}

// MockIFileFactoryMockRecorder is the mock recorder for MockIFileFactory.
type MockIFileFactoryMockRecorder struct {
	mock *MockIFileFactory
}

// NewMockIFileFactory creates a new mock instance.
func NewMockIFileFactory(ctrl *gomock.Controller) *MockIFileFactory {
	mock := &MockIFileFactory{ctrl: ctrl}
	mock.recorder = &MockIFileFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileFactory) EXPECT() *MockIFileFactoryMockRecorder {
	return m.recorder
}

// BuildFileEntry mocks base method.
func (m *MockIFileFactory) BuildFileEntry(paths ...string) IFileEntry {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildFileEntry", varargs...)
	ret0, _ := ret[0].(IFileEntry)
	return ret0
}

// BuildFileEntry indicates an expected call of BuildFileEntry.
func (mr *MockIFileFactoryMockRecorder) BuildFileEntry(paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFileEntry", reflect.TypeOf((*MockIFileFactory)(nil).BuildFileEntry), paths...)
}
