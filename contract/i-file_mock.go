// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-file.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFile is a mock of IFile interface.
type MockIFile struct {
	ctrl     *gomock.Controller
	recorder *MockIFileMockRecorder
}

// MockIFileMockRecorder is the mock recorder for MockIFile.
type MockIFileMockRecorder struct {
	mock *MockIFile
}

// NewMockIFile creates a new mock instance.
func NewMockIFile(ctrl *gomock.Controller) *MockIFile {
	mock := &MockIFile{ctrl: ctrl}
	mock.recorder = &MockIFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFile) EXPECT() *MockIFileMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIFile) Read(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockIFileMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFile)(nil).Read), arg0)
}
