// Code generated by MockGen. DO NOT EDIT.
// Source: contract\i-file-entry.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFileEntry is a mock of IFileEntry interface.
type MockIFileEntry struct {
	ctrl     *gomock.Controller
	recorder *MockIFileEntryMockRecorder
}

// MockIFileEntryMockRecorder is the mock recorder for MockIFileEntry.
type MockIFileEntryMockRecorder struct {
	mock *MockIFileEntry
}

// NewMockIFileEntry creates a new mock instance.
func NewMockIFileEntry(ctrl *gomock.Controller) *MockIFileEntry {
	mock := &MockIFileEntry{ctrl: ctrl}
	mock.recorder = &MockIFileEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileEntry) EXPECT() *MockIFileEntryMockRecorder {
	return m.recorder
}

// CopyTo mocks base method.
func (m *MockIFileEntry) CopyTo(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTo indicates an expected call of CopyTo.
func (mr *MockIFileEntryMockRecorder) CopyTo(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTo", reflect.TypeOf((*MockIFileEntry)(nil).CopyTo), arg0...)
}

// Exists mocks base method.
func (m *MockIFileEntry) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIFileEntryMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIFileEntry)(nil).Exists))
}

// GetPath mocks base method.
func (m *MockIFileEntry) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockIFileEntryMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockIFileEntry)(nil).GetPath))
}

// MoveTo mocks base method.
func (m *MockIFileEntry) MoveTo(arg0 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveTo indicates an expected call of MoveTo.
func (mr *MockIFileEntryMockRecorder) MoveTo(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveTo", reflect.TypeOf((*MockIFileEntry)(nil).MoveTo), arg0...)
}

// Remove mocks base method.
func (m *MockIFileEntry) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIFileEntryMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIFileEntry)(nil).Remove))
}
