// Code generated by MockGen. DO NOT EDIT.
// Source: model\contract\i-redis-option.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedisOption is a mock of IRedisOption interface.
type MockIRedisOption struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisOptionMockRecorder
}

// MockIRedisOptionMockRecorder is the mock recorder for MockIRedisOption.
type MockIRedisOptionMockRecorder struct {
	mock *MockIRedisOption
}

// NewMockIRedisOption creates a new mock instance.
func NewMockIRedisOption(ctrl *gomock.Controller) *MockIRedisOption {
	mock := &MockIRedisOption{ctrl: ctrl}
	mock.recorder = &MockIRedisOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisOption) EXPECT() *MockIRedisOptionMockRecorder {
	return m.recorder
}

// GetAddr mocks base method.
func (m *MockIRedisOption) GetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddr indicates an expected call of GetAddr.
func (mr *MockIRedisOptionMockRecorder) GetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr", reflect.TypeOf((*MockIRedisOption)(nil).GetAddr))
}

// GetPassword mocks base method.
func (m *MockIRedisOption) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockIRedisOptionMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockIRedisOption)(nil).GetPassword))
}
