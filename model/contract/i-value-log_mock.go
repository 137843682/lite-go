// Code generated by MockGen. DO NOT EDIT.
// Source: model\contract\i-value-log.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIValueLog is a mock of IValueLog interface.
type MockIValueLog struct {
	ctrl     *gomock.Controller
	recorder *MockIValueLogMockRecorder
}

// MockIValueLogMockRecorder is the mock recorder for MockIValueLog.
type MockIValueLogMockRecorder struct {
	mock *MockIValueLog
}

// NewMockIValueLog creates a new mock instance.
func NewMockIValueLog(ctrl *gomock.Controller) *MockIValueLog {
	mock := &MockIValueLog{ctrl: ctrl}
	mock.recorder = &MockIValueLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIValueLog) EXPECT() *MockIValueLogMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIValueLog) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIValueLogMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIValueLog)(nil).GetID))
}

// IsChange mocks base method.
func (m *MockIValueLog) IsChange() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChange")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsChange indicates an expected call of IsChange.
func (mr *MockIValueLogMockRecorder) IsChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChange", reflect.TypeOf((*MockIValueLog)(nil).IsChange))
}

// SetCount mocks base method.
func (m *MockIValueLog) SetCount(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCount", arg0)
}

// SetCount indicates an expected call of SetCount.
func (mr *MockIValueLogMockRecorder) SetCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCount", reflect.TypeOf((*MockIValueLog)(nil).SetCount), arg0)
}

// SetID mocks base method.
func (m *MockIValueLog) SetID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", arg0)
}

// SetID indicates an expected call of SetID.
func (mr *MockIValueLogMockRecorder) SetID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockIValueLog)(nil).SetID), arg0)
}
