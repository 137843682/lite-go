// Code generated by MockGen. DO NOT EDIT.
// Source: model\contract\i-value-type.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIValueType is a mock of IValueType interface.
type MockIValueType struct {
	ctrl     *gomock.Controller
	recorder *MockIValueTypeMockRecorder
}

// MockIValueTypeMockRecorder is the mock recorder for MockIValueType.
type MockIValueTypeMockRecorder struct {
	mock *MockIValueType
}

// NewMockIValueType creates a new mock instance.
func NewMockIValueType(ctrl *gomock.Controller) *MockIValueType {
	mock := &MockIValueType{ctrl: ctrl}
	mock.recorder = &MockIValueTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIValueType) EXPECT() *MockIValueTypeMockRecorder {
	return m.recorder
}

// GetCustomEncodingKey mocks base method.
func (m *MockIValueType) GetCustomEncodingKey(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomEncodingKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCustomEncodingKey indicates an expected call of GetCustomEncodingKey.
func (mr *MockIValueTypeMockRecorder) GetCustomEncodingKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomEncodingKey", reflect.TypeOf((*MockIValueType)(nil).GetCustomEncodingKey), arg0)
}

// GetDailyTime mocks base method.
func (m *MockIValueType) GetDailyTime() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyTime")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDailyTime indicates an expected call of GetDailyTime.
func (mr *MockIValueTypeMockRecorder) GetDailyTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyTime", reflect.TypeOf((*MockIValueType)(nil).GetDailyTime))
}

// GetEncodingKey mocks base method.
func (m *MockIValueType) GetEncodingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncodingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEncodingKey indicates an expected call of GetEncodingKey.
func (mr *MockIValueTypeMockRecorder) GetEncodingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodingKey", reflect.TypeOf((*MockIValueType)(nil).GetEncodingKey))
}

// GetIsReplace mocks base method.
func (m *MockIValueType) GetIsReplace() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsReplace")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetIsReplace indicates an expected call of GetIsReplace.
func (mr *MockIValueTypeMockRecorder) GetIsReplace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsReplace", reflect.TypeOf((*MockIValueType)(nil).GetIsReplace))
}

// GetRewards mocks base method.
func (m *MockIValueType) GetRewards() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewards")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetRewards indicates an expected call of GetRewards.
func (mr *MockIValueTypeMockRecorder) GetRewards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockIValueType)(nil).GetRewards))
}

// GetValue mocks base method.
func (m *MockIValueType) GetValue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockIValueTypeMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockIValueType)(nil).GetValue))
}
