// Code generated by MockGen. DO NOT EDIT.
// Source: model\contract\i-default-config.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDefaultConfig is a mock of IDefaultConfig interface.
type MockIDefaultConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIDefaultConfigMockRecorder
}

// MockIDefaultConfigMockRecorder is the mock recorder for MockIDefaultConfig.
type MockIDefaultConfigMockRecorder struct {
	mock *MockIDefaultConfig
}

// NewMockIDefaultConfig creates a new mock instance.
func NewMockIDefaultConfig(ctrl *gomock.Controller) *MockIDefaultConfig {
	mock := &MockIDefaultConfig{ctrl: ctrl}
	mock.recorder = &MockIDefaultConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDefaultConfig) EXPECT() *MockIDefaultConfigMockRecorder {
	return m.recorder
}

// GetAuthCipher mocks base method.
func (m *MockIDefaultConfig) GetAuthCipher() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthCipher")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthCipher indicates an expected call of GetAuthCipher.
func (mr *MockIDefaultConfigMockRecorder) GetAuthCipher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCipher", reflect.TypeOf((*MockIDefaultConfig)(nil).GetAuthCipher))
}

// GetGateway mocks base method.
func (m *MockIDefaultConfig) GetGateway() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateway")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGateway indicates an expected call of GetGateway.
func (mr *MockIDefaultConfigMockRecorder) GetGateway() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateway", reflect.TypeOf((*MockIDefaultConfig)(nil).GetGateway))
}

// GetMongo mocks base method.
func (m *MockIDefaultConfig) GetMongo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMongo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMongo indicates an expected call of GetMongo.
func (mr *MockIDefaultConfigMockRecorder) GetMongo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMongo", reflect.TypeOf((*MockIDefaultConfig)(nil).GetMongo))
}

// GetName mocks base method.
func (m *MockIDefaultConfig) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIDefaultConfigMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIDefaultConfig)(nil).GetName))
}

// GetPort mocks base method.
func (m *MockIDefaultConfig) GetPort() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPort indicates an expected call of GetPort.
func (mr *MockIDefaultConfigMockRecorder) GetPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockIDefaultConfig)(nil).GetPort))
}

// GetRedis mocks base method.
func (m *MockIDefaultConfig) GetRedis() IRedisOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedis")
	ret0, _ := ret[0].(IRedisOption)
	return ret0
}

// GetRedis indicates an expected call of GetRedis.
func (mr *MockIDefaultConfigMockRecorder) GetRedis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedis", reflect.TypeOf((*MockIDefaultConfig)(nil).GetRedis))
}
