// Code generated by MockGen. DO NOT EDIT.
// Source: model\contract\i-target-type.go

// Package contract is a generated GoMock package.
package contract

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITargetType is a mock of ITargetType interface.
type MockITargetType struct {
	ctrl     *gomock.Controller
	recorder *MockITargetTypeMockRecorder
}

// MockITargetTypeMockRecorder is the mock recorder for MockITargetType.
type MockITargetTypeMockRecorder struct {
	mock *MockITargetType
}

// NewMockITargetType creates a new mock instance.
func NewMockITargetType(ctrl *gomock.Controller) *MockITargetType {
	mock := &MockITargetType{ctrl: ctrl}
	mock.recorder = &MockITargetTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITargetType) EXPECT() *MockITargetTypeMockRecorder {
	return m.recorder
}

// GetApp mocks base method.
func (m *MockITargetType) GetApp() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApp indicates an expected call of GetApp.
func (mr *MockITargetTypeMockRecorder) GetApp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockITargetType)(nil).GetApp))
}

// GetCustomEncodingKey mocks base method.
func (m *MockITargetType) GetCustomEncodingKey(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomEncodingKey", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCustomEncodingKey indicates an expected call of GetCustomEncodingKey.
func (mr *MockITargetTypeMockRecorder) GetCustomEncodingKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomEncodingKey", reflect.TypeOf((*MockITargetType)(nil).GetCustomEncodingKey), arg0)
}

// GetEncodingKey mocks base method.
func (m *MockITargetType) GetEncodingKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncodingKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEncodingKey indicates an expected call of GetEncodingKey.
func (mr *MockITargetTypeMockRecorder) GetEncodingKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncodingKey", reflect.TypeOf((*MockITargetType)(nil).GetEncodingKey))
}

// GetValue mocks base method.
func (m *MockITargetType) GetValue() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetValue indicates an expected call of GetValue.
func (mr *MockITargetTypeMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockITargetType)(nil).GetValue))
}
